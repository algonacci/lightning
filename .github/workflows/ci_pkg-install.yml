name: Package

# see: https://help.github.com/en/actions/reference/events-that-trigger-workflows
on:  # Trigger the workflow on push or pull request, but only for the master branch
  push:
    branches: [master, "release/*"]
  pull_request:
    branches: [master, "release/*"]
    paths-ignore:
      - "src/lightning_app/**"  # todo: implement job skip

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref }}
  cancel-in-progress: ${{ ! (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release/')) }}

jobs:

  install:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      # max-parallel: 6
      matrix:
        os: [ubuntu-20.04, macOS-10.15, windows-2019]
        pkg: ["", "lightning", "app", "pytorch"]
        python-version: [3.7]  # , 3.9

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Prepare env
        run: |
          pip install "twine==3.2" setuptools wheel

      - name: Create package
        env:
          PACKAGE_NAME: ${{ matrix.pkg }}
        run: |
          python setup.py check --metadata --strict
          python setup.py sdist bdist_wheel

      - name: Check package
        env:
          PACKAGE_NAME: ${{ matrix.pkg }}
        run: |
          ls -l dist/
          twine check dist/*
          python setup.py clean

      # ToDo
      #- name: Setup Windows
      #  if: runner.os == 'windows'
      #  run: |
      #    # this is just a hotfix because of Win cannot install it directly
      #    pip install -r requirements.txt --find-links https://download.pytorch.org/whl/cpu/torch_stable.html

      - name: Package name
        working-directory: ./dist
        run: python -c "import glob ; ls = glob.glob('*.tar.gz') ; name = '_'.join(ls[0].split('-')[:-1]) ; print(f'PKG_NAME={name}')" >> $GITHUB_ENV

      - name: Install | Uninstall package - archive
        working-directory: ./dist
        run: |
          # install as archive
          pip install *.tar.gz
          python -c "import ${PKG_NAME} ; print(${PKG_NAME}.__version__)"
          pip uninstall -y ${PKG_NAME}

      - name: Install | Uninstall package - wheel
        working-directory: ./dist
        run: |
          # install as wheel
          pip install *.whl
          python -c "import ${PKG_NAME} ; print(${PKG_NAME}.__version__)"
          pip uninstall -y ${PKG_NAME}
